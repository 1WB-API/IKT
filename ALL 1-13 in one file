######################################################################
############################### 1 ЛАБ ###############################
######################################################################
print('')
print('===== 1 ПРАКТИЧЕСКОЕ ЗАДАНИЕ =====')
print('')

print('ЧАСТЬ 1: ')
import math
#1
x=2
y=2
r1 = (y**(3**x))-(x**3)-(math.exp(-x/3))
print('1) ', r1)

#2
x=2
y=2
r2 = math.exp((x**2)-1)-2*math.log(abs(x+1))-3/(x*y)
print('2) ', r2)

#3
x=2
r3 = 0.8*(math.sin((x/3)-((x+2)/(x+1)))**2)**3
print('3) ', r3)

#4
x=2
y=3
r4 = ((math.cos(3*x**2)**3+x**(1/2))/(x+4*y))-((x+1)/(x-1))**(1/3)
print('4) ', r4)


print('ЧАСТЬ 2: ')
import math
g=3
h=1
x=g+3*h
t=math.cos(2*g-6*h)**2
r = ((math.cos(x)+7)**(1/3)+4)/(5*x+t)
print('Результат: ', r)

######################################################################
############################### 2 ЛАБ ###############################
######################################################################
print('')
print('===== 2 ПРАКТИЧЕСКОЕ ЗАДАНИЕ =====')
print('')

print('ЧАСТЬ 1: ')
print('Введите число: ')
x = float(input())

# a)
print('Если интервал равен (-3; 0), то: ')
s_r = -3
e_r = 0

if s_r < x < e_r:
    print("Точка принадлежит интервалу")
else:
    print("Точка не принадлежит интервалу")

# б)
print('Если интервал равен [3; 6] U (10; 20), то: ')
s_r1 = 3
e_r1 = 6
s_r2 = 10
e_r2 = 20
if (s_r1 <= x <= e_r1) or (s_r2 < x < e_r2):
    print("Точка принадлежит интервалу")
else:
    print("Точка не принадлежит интервалу")


print('ЧАСТЬ 2: ')
import math
t = float(input('Введите t'))
a = t + 1
b = 4*t
c = 3*t
if a == 0:
    x = -c/2*a
else:
    D = b**2 - 4*a*c
    print('D:', D)
    print('a:', a)
    print('b:', b)
    print('c:', c)
    if D >= 0:
        x1 = (-b + math.sqrt(D)) / (2 * a)
        x2 = (-b - math.sqrt(D)) / (2 * a)
        print('x1 =', x1, 'x2 =', x2)
    else:
        print('D < 0')


######################################################################
############################### 3 ЛАБ ###############################
######################################################################
print('')
print('===== 3 ПРАКТИЧЕСКОЕ ЗАДАНИЕ =====')
print('')

x = 10
y = 5
z = 3

value1 = (x + y - z) / 5
if y > value1:
    max_value = y
else:
    max_value = value1

value2 = (x + y - z) / y
if 2*x / max_value < value2:
    min_value = 2*x / max_value
else:
    min_value = value2

print(f"x = {x}")
print(f"y = {y}")
print(f"z = {z}")
print(f"u = {min_value}")

######################################################################
############################### 4 ЛАБ ###############################
######################################################################
print('')
print('===== 4 ПРАКТИЧЕСКОЕ ЗАДАНИЕ =====')
print('')

import numpy as np
import matplotlib.pyplot as plt

def f(x):
    return 2*x**4 - 8*x**3 + 3*x**2 + 10*x - 2

x = np.linspace(-5, 5, 100)
y = f(x)

max_value = np.max(y)
min_value = np.min(y)

print(f"Наибольшее значение функции f(x) на отрезке [-5; 5]: {max_value}")
print(f"Наименьшее значение функции f(x) на отрезке [-5; 5]: {min_value}")

plt.plot(x, y, label='f(x) = 2x^4 - 8x^3 + 3x^2 + 10x - 2')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.title('График функции f(x)')
plt.legend()
plt.grid()
plt.show()

######################################################################
############################### 5 ЛАБ ###############################
######################################################################
print('')
print('===== 5 ПРАКТИЧЕСКОЕ ЗАДАНИЕ =====')
print('')

def u_k(k, x):
    return ((-1)**(k+1)) * ((k**2) * (x**k) / (2**k))

def calculate_S(x, n):
    S = 0
    for k in range(1, n+1):
        S += u_k(k, x)
    return S

x_values = [0.1, 0.3, 0.4, 0.7, 1.0]
n = 10

print("**********************")
for x in x_values:
    S = calculate_S(x, n)
    print(f"X={x} S={S:.2f}")
print("**********************")

######################################################################
############################### 6 ЛАБ ###############################
######################################################################
print('')
print('===== 6 ПРАКТИЧЕСКОЕ ЗАДАНИЕ =====')
print('')

def process_array(arr):
    modified_arr = arr.copy()
    count_negatives = 0

    for i in range(len(modified_arr)):
        if i % 2 == 0:  # Четные индексы
            modified_arr[i] *= 2
        else:  # Нечетные индексы
            if modified_arr[i] < 0:
                count_negatives += 1
            modified_arr[i] = 0

    return modified_arr, count_negatives

def print_array(arr):
    for elem in arr:
        print(elem, end=" ")
    print()

# Исходный массив B(m)
B = [5, -3, 8, 10, -2, 7, -1, 4, 6, -9, 12, -5, 3, 0, -6]
m = len(B)

print("Исходный массив:")
print_array(B)

modified_array, count_negatives = process_array(B)

print("\nПреобразованный массив:")
print_array(modified_array)

print(f"\nКоличество отрицательных элементов в преобразованном массиве: {count_negatives}")


######################################################################
############################### 7 ЛАБ ###############################
######################################################################
print('')
print('===== 7 ПРАКТИЧЕСКОЕ ЗАДАНИЕ =====')
print('')

import numpy as np

# Исходные данные
A = np.array([[1, 2, 3],
              [1, 2, 1],
              [3, 2, 0]])

B = np.array([[4, 1, 2],
              [0, 4, 3],
              [1, 1, 1]])

p = np.array([0.1, 1.7, -1.5])
q = np.array([-1.6, 0.8, 1.1])
r = np.array([-0.7, 1.3, 0.2])

# Вычисление s=(r + B*B*r, p)
result = np.dot(r + np.dot(B, np.dot(B, r)), p)

print(f"Результат выражения s=(r + B*B*r, p): {result}")

######################################################################
############################### 8 ЛАБ ###############################
######################################################################
print('')
print('===== 8 ПРАКТИЧЕСКОЕ ЗАДАНИЕ =====')
print('')

import numpy as np

# Заданные параметры
S = 8
G = 7
K = 1

# Создание матрицы коэффициентов и вектора свободных членов
A = np.array([[1, 5, 1], [4, -1, 1], [S, G, 2*(S+G+K)]])
B = np.array([S-G+K+10, S-G+4*K-2, 2*((S-G)*(S+G+K)+G)+K*S])

# Решение системы уравнений
X = np.linalg.solve(A, B)

# Вычисление определителя
det_A = np.linalg.det(A)

# Нахождение обратной матрицы
if det_A != 0:
    A_inv = np.linalg.inv(A)
else:
    print("Матрица коэффициентов вырожденная, обратной матрицы не существует.")

# Вывод результатов
print("Определитель матрицы коэффициентов (det(A)):", det_A)
print("Обратная матрица:")
if det_A != 0:
    print(A_inv)
print("Решение СЛАУ:")
print("x1 =", X[0])
print("x2 =", X[1])
print("x3 =", X[2])


######################################################################
############################### 9 ЛАБ ###############################
######################################################################
print('')
print('===== 9 ПРАКТИЧЕСКОЕ ЗАДАНИЕ =====')
print('')

import math
import numpy as np

N = 3

A = np.array([[1, 5, 1], [4, -1, 1], [S, G, 2*(S+G+K)]])
print('Исходный массив A')
print(A)

B = np.array([S-G+K+10, S-G+4*K-2, 2*((S-G)*(S+G+K)+G)+K*S])
print('Исходный массив B')
print(B)

Adiag = np.diag(A)
Alpha = A.T/Adiag
Alpha[np.diag_indices_from(Alpha)] = 0
Alpha = Alpha.T

print('===================')
print(Alpha)
print('===================')

Beta = B/Adiag
print(Beta)
print('===================')

x1 = np.zeros(N, dtype = float)
x = Beta
KMAX = 100
k = 0

while(np.max(abs(x-x1))>0.001) & (k<KMAX):
    x = x1
    x1 = Beta - np.dot(Alpha,x)
    k += 1

print("k = ",k, "Погрешность = ", np.max(abs(x-x1)))

print('')
print('X')

for i in range (0,N):
    print('%f'%x1[i],end=' ')
print('')


######################################################################
############################### 10 ЛАБ ###############################
######################################################################
print('')
print('===== 10 ПРАКТИЧЕСКОЕ ЗАДАНИЕ =====')
print('')

import numpy as np

# Исходные данные
S = 8
G = 7
p = 2*(G+S)
m = -p+S

# Создание матрицы A
A = (1/6) * np.array([[p, m, 2*S],
                      [m, 2*p+S, m],
                      [2*S, m, p]])

# Вычисление собственных значений и собственных векторов
eigenvalues, eigenvectors = np.linalg.eig(A)

# Находим максимальное по модулю собственное значение
max_eigenvalue_index = np.argmax(np.abs(eigenvalues))
max_eigenvalue = eigenvalues[max_eigenvalue_index]
max_eigenvector = eigenvectors[:, max_eigenvalue_index]

print("Собственные значения:", eigenvalues)
print("Собственные векторы:")
print(eigenvectors)
print("\nМаксимальное по модулю собственное значение:", max_eigenvalue)
print("Соответствующий ему собственный вектор:", max_eigenvector)

######################################################################
############################### 11 ЛАБ ###############################
######################################################################
print('')
print('===== 11 ПРАКТИЧЕСКОЕ ЗАДАНИЕ =====')
print('')

import numpy as np

# Заданные значения S и G
S = 8
G = 7
S = S/10
G = G/10

# Коэффициенты полинома
a0 = -S * (G**2 + S**2)
a1 = (G + S)**2
a2 = -(2*G - S)
a3 = 1  # По условию задачи

# Функция f(x), которую мы интегрируем
def f(x):
    return a0 + a1 * x + a2 * x**2 + a3 * x**3

# Метод прямоугольников
def rectangle_method(a, b, n):
    h = (b - a) / n
    result = sum(f(a + i * h) for i in range(n)) * h
    return result

# Метод трапеций
def trapezoid_method(a, b, n):
    h = (b - a) / n
    result = (f(a) + f(b)) / 2
    for i in range(1, n):
        result += f(a + i * h)
    result *= h
    return result

# Метод Симпсона
def simpson_method(a, b, n):
    h = (b - a) / n
    result = (f(a) + f(b)) + 4 * sum(f(a + (2 * i - 1) * h) for i in range(1, n // 2 + 1)) + 2 * sum(f(a + 2 * i * h) for i in range(1, n // 2))
    result *= h / 3
    return result

# Интервал интегрирования и количество разбиений
a = 0
b = 3
n = 1000  # Количество разбиений для точности

# Вычисляем приближенное значение интеграла каждым методом
S_rect = rectangle_method(a, b, n)
S_trap = trapezoid_method(a, b, n)
S_simp = simpson_method(a, b, n)

print(f"Метод прямоугольников: {S_rect}")
print(f"Метод трапеций: {S_trap}")
print(f"Метод Симпсона: {S_simp}")

######################################################################
############################### 12 ЛАБ ###############################
######################################################################
print('')
print('===== 12 ПРАКТИЧЕСКОЕ ЗАДАНИЕ =====')
print('')

import math

# Заданные значения S и G
S = 8
G = 7
S = S/10
G = G/10

# Коэффициенты полинома
a0 = -S * (G**2 + S**2)
a1 = (G + S)**2
a2 = -(2*G - S)
a3 = 1  # По условию задачи

# Функция полинома
def f(x):
    return a0 + a1*x + a2*x**2 + a3*x**3

# Производная функции полинома
def df(x):
    return a1 + 2*a2*x + 3*a3*x**2

# Метод Ньютона
def newtons_method(f, df, x0, tolerance=0.001):
    while True:
        x1 = x0 - f(x0) / df(x0)
        if abs(x1 - x0) < tolerance:
            return x1
        x0 = x1

# Начальное приближение
x0 = 1.5  # Выбрано как середина интервала [0,3]

# Вызов метода Ньютона
root = newtons_method(f, df, x0)

print(f"Корень полинома на интервале [0,3]: {root:.3f}")

######################################################################
############################### 13 ЛАБ ###############################
######################################################################
print('')
print('===== 13 ПРАКТИЧЕСКОЕ ЗАДАНИЕ =====')
print('')

import numpy as np
import matplotlib.pyplot as plt

x = np.array([13, 11,10,9,8,2,2,4,5,6,7,8]) 
y = np.array([17,11.5,10,8,6.5,1,3,4,5.5,6,6.5,7])

A = np.vstack([x, np.ones(len(x))]).T
m, b = np.linalg.lstsq(A, y, rcond=None)[0]

print("Уравнение оптимальной прямой: y = {:.3f}x + {:.3f}".format(m, b))

line_eq = "Уравнение прямой: y = {:.3f}x + {:.3f}".format(m, b)

plt.figure(figsize=(8, 6))
plt.scatter(x, y, color='red', label='Точки')  
plt.plot(x, m*x + b, color='blue', label='Прямая') 
plt.title('Оптимальная прямая методом наименьших квадратов')
plt.xlabel('x')
plt.ylabel('y')
plt.grid(True)
plt.legend()
plt.text(0.5, 0.5, line_eq, fontsize=12, transform=plt.gca().transAxes)
plt.show()
